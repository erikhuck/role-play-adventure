generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AbilityTemplate {
  name               String         @id
  effectedConditions Json?
  itemTemplates      ItemTemplate[]
}

model NpcAbilityTemplate {
  name               String
  effectedConditions Json?
  level              Int
  npcTemplateName    String
  npcTemplate        NpcTemplate @relation("NpcAbilityTemplates", fields: [npcTemplateName], references: [name], onDelete: Cascade)

  @@id([name, npcTemplateName])
}

model ItemTemplate {
  name               String           @id
  weight             Int
  price              Int              @default(0)
  maxCharges         Int              @default(5)
  abilityName        String?
  associatedAbility  AbilityTemplate? @relation(fields: [abilityName], references: [name])
  effectedAbilities  Json?
  effectedConditions Json?
  description        String?
  items              Item[]
}

model Item {
  id           Int          @id @default(autoincrement())
  templateName String
  template     ItemTemplate @relation(fields: [templateName], references: [name])
  charges      Int          @default(5)
  containerId  Int
  container    Container    @relation(fields: [containerId], references: [id], onDelete: Cascade)
}

model ContainerTemplate {
  name           String        @id
  weightCapacity Int
  npcTemplates   NpcTemplate[] @relation("ContainerTemplates")
}

model Container {
  id             Int     @id @default(autoincrement())
  name           String
  weightCapacity Int
  location       String  @default("On person")
  playerName     String?
  npcId          Int?
  npc            Npc?    @relation(fields: [npcId], references: [id], onDelete: Cascade)
  player         Player? @relation(fields: [playerName], references: [name], onDelete: Cascade)
  items          Item[]
}

model NpcTemplate {
  name               String               @id
  maxHealth          Int                  @default(100)
  maxStamina         Int                  @default(100)
  carryCapacity      Int                  @default(100)
  abilityTemplates   NpcAbilityTemplate[] @relation("NpcAbilityTemplates")
  containerTemplates ContainerTemplate[]  @relation("ContainerTemplates")
}

model Npc {
  id         Int          @id @default(autoincrement())
  name       String
  health     Int
  stamina    Int
  maxHealth  Int
  maxStamina Int
  containers Container[]
  abilities  NpcAbility[]
}

model NpcAbility {
  name               String
  level              Int
  tmpDiff            Int    @default(0)
  effectedConditions Json
  npcId              Int
  npc                Npc    @relation(fields: [npcId], references: [id], onDelete: Cascade)

  @@id([npcId, name])
}

model Player {
  name          String          @id
  health        Int             @default(100)
  stamina       Int             @default(100)
  fatigue       Int             @default(100)
  hunger        Int             @default(100)
  thirst        Int             @default(100)
  happiness     Int             @default(100)
  maxHealth     Int             @default(100)
  maxStamina    Int             @default(100)
  maxFatigue    Int             @default(100)
  maxHunger     Int             @default(100)
  maxThirst     Int             @default(100)
  maxHappiness  Int             @default(100)
  carryCapacity Int             @default(100)
  containers    Container[]
  abilities     PlayerAbility[]
}

model PlayerAbility {
  name               String
  level              Int    @default(0)
  xp                 Int    @default(0)
  tmpDiff            Int    @default(0)
  effectedConditions Json
  playerName         String
  player             Player @relation(fields: [playerName], references: [name], onDelete: Cascade)

  @@id([playerName, name])
}
